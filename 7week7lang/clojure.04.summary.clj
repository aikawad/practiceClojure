;  Clojure Summary

 7.5 打鐵趁熱

 7.5.1 Lisp悖論

 7.5.2 核心優勢
   A. 優秀的Lisp方言
     1. 減少括號
     2. 生態系統
     3. 克制。(限制語法以避免宏讀取器，限制了Clojure的力量，但是有效了降低出現有害的方言碎片的可能性！)
   B. 併發支持
      由STM機制維護狀態的修改。
   C. Java集成
   D. 延遲計算
      1. 降低計算開銷。
      2. 延遲序列可以代替遞迴，迭代或者已實現的集合。
   E. 數據即代碼


7.5.3 不足之處

  A. 前綴表達法
      1. 與傳統oo的語法差異很大。
      2. 代碼容易迫使使用者過早去了解過多細節。
  B. 可讀性
      1. Lisp語系的過多括號。不過Clojure有做一些調整
  C. 學習曲線
      0.需要一隊極有天賦和經驗的人馬才能用Lisp展開工作。
      1.研持續列
      2.函數式編程
      3.宏擴展
      4.事務內存
      5.精密複雜的方法
      以上都是需要時間才能掌握的強大概念。
  D. 受限的Lisp
      1. 受限於JVM, Clojure限制了尾遞迴優化，必須用recur語法，但相當可怕。
      2. 消滅用戶定義的宏讀取器。
           A. 好處是避免宏讀取器被濫用時，導致語言分裂。
           B. 但代價也很明顯，少了一樣元編程的工具。
  E. 親和度
      初學的時候就需要面對太多的抽象工具與概念，箱對於ruby, java 的簡單易學，就比較不友善了。

 7.5.4 最後思考

   推測未來的需求，來自併發和複雜性的新需求，會使Java平台愈來愈難以為繼。
   若
     1. 需要一種極端的編程模型，並
     2.願意付出學習語言的代價
   Clojure非常適合。
   可以用Clojure更快地創建出更好的軟件。

